# This example demonstrates the use of a git repo as a hard-wired input artifact.
# The argo repo is cloned to its target destination at '/src' for the main container to consume.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: input-artifact-git-
spec:
  entrypoint: main
  templates:
  - name: main
    steps:
      - - name: git-clone
          template: git-clone
          arguments:
            parameters:
              - name: param
                value: "-Message 'Matt Cui'"
              - name: git-url
                value: "git@github.com:nordcloud/supermaestro-kone-spn-automation.git"
              - name: file
                value: "create-text-file.ps1"
              - name: work-dir
                value: "scripts"

  - name: git-clone
    inputs:
      parameters:
      - name: param
      - name: git-url
      - name: file
      - name: work-dir
      artifacts:
      - name: pwsh-source
        path: /src
        git:
          repo: "{{inputs.parameters.git-url}}"
          # revision: "v2.1.1"
          # For private repositories, create a k8s secret containing the git credentials and
          # reference the secret keys in the secret selectors: usernameSecret, passwordSecret,
          # or sshPrivateKeySecret.
          # NOTE: when authenticating via sshPrivateKeySecret, the repo URL should supplied in its
          # SSH format (e.g. git@github.com:argoproj/argo-workflows.git). Similarly, when authenticating via
          # basic auth, the URL should be in its HTTP form (e.g. https://github.com/argoproj/argo-workflows.git)
          # usernameSecret:
          #   name: github-creds
          #   key: username
          # passwordSecret:
          #   name: github-creds
          #   key: password
          sshPrivateKeySecret:
            name: github-creds
            key: ssh-private-key
          # 
          # insecureIgnoreHostKey disables SSH strict host key checking during the git clone
          # NOTE: this is unnecessary for the well-known public SSH keys from the major git
          # providers (github, bitbucket, gitlab, azure) as these keys are already baked into
          # the executor image which performs the clone.
          insecureIgnoreHostKey: true
          #
          # Shallow clones/fetches can be performed by providing a `depth`.
          # depth: 1
          #
          # Additional ref specs to fetch down prior to checkout can be
          # provided with `fetch`. This may be necessary if `revision` is a
          # non-branch/-tag ref and thus not covered by git's default fetch.
          # See https://git-scm.com/book/en/v2/Git-Internals-The-Refspec for
          # the refspec format.
          # fetch: refs/meta/*
          # fetch: refs/changes/*
          #
          # Single branch mode can be specified by providing a `singleBranch` and `branch` This mode 
          # is faster than passing in a revision, as it will only fetch the references to the given branch.
          singleBranch: true
          branch: matt-test
    container:
      # image: mcr.microsoft.com/azure-powershell:8.3.0-ubuntu-22.04
      image: mattcui/azure-powershell:8.3.0-ubuntu-22.04-sm
      command: ["bash", "-c"]
      args: ["pwsh -f {{inputs.parameters.file}} {{inputs.parameters.param}}"]
      workingDir: /src/{{inputs.parameters.work-dir}}
